name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  # The name of the binary produced by 'cargo build'.
  # Change this to match the name in your Cargo.toml.
  CARGO_BINARY_NAME: elgato-pedal-controller
  CARGO_TERM_COLOR: always

jobs:
  # This job builds the application for each target in the matrix.
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
          - target: x86_64-unknown-linux-musl
          - target: aarch64-unknown-linux-gnu

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libudev-dev libhidapi-dev

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target != 'x86_64-unknown-linux-gnu'
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          elif [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
            sudo apt-get install -y musl-tools
          fi

      - name: Configure Cargo for cross-compilation (aarch64-linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p .cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> .cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --locked

      - name: Prepare package for release
        shell: bash
        run: |
          source_dir="target/${{ matrix.target }}/release"
          source_file="$source_dir/${{ env.CARGO_BINARY_NAME }}"
          binary_name="${{ env.CARGO_BINARY_NAME }}-${{ matrix.target }}"
          
          echo "Source file: $source_file"
          echo "Final binary name: $binary_name"

          # Strip debug symbols to reduce file size
          echo "Stripping binary..."
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            aarch64-linux-gnu-strip "$source_file"
          else
            strip "$source_file"
          fi

          # Rename the binary to its final platform-specific name
          mv "$source_file" "$binary_name"

          # Package the binary into a compressed archive
          archive_name="${binary_name}.tar.gz"
          tar -czvf "$archive_name" "$binary_name"

          # Pass the final archive path to the next step
          echo "ARTIFACT_PATH=${archive_name}" >> $GITHUB_ENV
          
          echo "Created archive: $archive_name"
          ls -l

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          # Use a unique name for each platform's artifact
          name: release-artifact-${{ matrix.target }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error

  # This job runs after all 'build' jobs are complete.
  # It creates the GitHub release and uploads all the assets.
  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      # This permission is required to create a release and upload assets.
      contents: write
    steps:
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          # Download all artifacts (this will create separate folders for each)
          path: release-assets

      - name: Generate checksums
        shell: bash
        run: |
          # Move all artifacts to a single directory
          mkdir -p final-assets
          find release-assets -name "*.tar.gz" | while read file; do
            mv "$file" final-assets/
          done
          
          cd final-assets
          # Create a checksum file for all the archives
          sha256sum * > ../checksums.txt
          cd ..
          echo "--- Release Assets ---"
          ls -l final-assets/
          echo "--- Checksums ---"
          cat checksums.txt

      - name: Publish release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          # The body of the release. You could also point to a changelog file.
          body: "Official release for ${{ github.ref_name }}. See attached assets for binaries."
          # Upload all files from the assets directory and the checksums file.
          files: |
            final-assets/*
            checksums.txt